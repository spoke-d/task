// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/task/guard (interfaces: Task,Guest)

// Package guard is a generated GoMock package.
package guard

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTask is a mock of Task interface
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Wait mocks base method
func (m *MockTask) Wait() error {
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockTaskMockRecorder) Wait() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTask)(nil).Wait))
}

// MockGuest is a mock of Guest interface
type MockGuest struct {
	ctrl     *gomock.Controller
	recorder *MockGuestMockRecorder
}

// MockGuestMockRecorder is the mock recorder for MockGuest
type MockGuestMockRecorder struct {
	mock *MockGuest
}

// NewMockGuest creates a new mock instance
func NewMockGuest(ctrl *gomock.Controller) *MockGuest {
	mock := &MockGuest{ctrl: ctrl}
	mock.recorder = &MockGuestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGuest) EXPECT() *MockGuestMockRecorder {
	return m.recorder
}

// Visit mocks base method
func (m *MockGuest) Visit(arg0 func() error, arg1 <-chan struct{}) error {
	ret := m.ctrl.Call(m, "Visit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Visit indicates an expected call of Visit
func (mr *MockGuestMockRecorder) Visit(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockGuest)(nil).Visit), arg0, arg1)
}
